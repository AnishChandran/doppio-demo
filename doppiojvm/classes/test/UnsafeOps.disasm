Compiled from "UnsafeOps.java"
public class classes.test.UnsafeOps extends java.lang.Object
  SourceFile: "UnsafeOps.java"
  InnerClass: 
   #48= #13 of #46; //Foo=class classes/test/UnsafeOps$Foo of class classes/test/UnsafeOps
  minor version: 0
  major version: 50
  Constant pool:
const #1 = Method	#47.#72;	//  java/lang/Object."<init>":()V
const #2 = class	#73;	//  sun/misc/Unsafe
const #3 = String	#74;	//  theUnsafe
const #4 = Method	#75.#76;	//  java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
const #5 = Method	#77.#78;	//  java/lang/reflect/Field.setAccessible:(Z)V
const #6 = Method	#77.#79;	//  java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;
const #7 = class	#80;	//  java/lang/Exception
const #8 = Method	#46.#81;	//  classes/test/UnsafeOps.getUnsafe:()Lsun/misc/Unsafe;
const #9 = Method	#2.#82;	//  sun/misc/Unsafe.addressSize:()I
const #10 = class	#83;	//  "[I"
const #11 = Method	#2.#84;	//  sun/misc/Unsafe.arrayBaseOffset:(Ljava/lang/Class;)I
const #12 = Method	#2.#85;	//  sun/misc/Unsafe.arrayIndexScale:(Ljava/lang/Class;)I
const #13 = class	#86;	//  classes/test/UnsafeOps$Foo
const #14 = Method	#2.#87;	//  sun/misc/Unsafe.allocateInstance:(Ljava/lang/Class;)Ljava/lang/Object;
const #15 = Field	#88.#89;	//  java/lang/System.out:Ljava/io/PrintStream;
const #16 = Field	#13.#90;	//  classes/test/UnsafeOps$Foo.a:I
const #17 = Method	#91.#92;	//  java/io/PrintStream.println:(I)V
const #18 = Field	#13.#93;	//  classes/test/UnsafeOps$Foo.b:D
const #19 = Method	#91.#94;	//  java/io/PrintStream.println:(D)V
const #20 = Field	#13.#95;	//  classes/test/UnsafeOps$Foo.c:Ljava/lang/String;
const #21 = Method	#91.#96;	//  java/io/PrintStream.println:(Ljava/lang/String;)V
const #22 = class	#97;	//  java/lang/InstantiationException
const #23 = Method	#91.#98;	//  java/io/PrintStream.println:(Ljava/lang/Object;)V
const #24 = String	#99;	//  c
const #25 = class	#100;	//  java/lang/NoSuchFieldException
const #26 = Method	#2.#101;	//  sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
const #27 = Method	#2.#102;	//  sun/misc/Unsafe.getObject:(Ljava/lang/Object;J)Ljava/lang/Object;
const #28 = String	#103;	//  hello Unsafe
const #29 = Method	#2.#104;	//  sun/misc/Unsafe.putObject:(Ljava/lang/Object;JLjava/lang/Object;)V
const #30 = String	#105;	//  hello again Unsafe
const #31 = Method	#2.#106;	//  sun/misc/Unsafe.putOrderedObject:(Ljava/lang/Object;JLjava/lang/Object;)V
const #32 = String	#107;	//  not newC
const #33 = String	#108;	//  whargl
const #34 = Method	#2.#109;	//  sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
const #35 = Method	#91.#110;	//  java/io/PrintStream.println:(Z)V
const #36 = String	#111;	//  I'm exceptional!
const #37 = Method	#7.#112;	//  java/lang/Exception."<init>":(Ljava/lang/String;)V
const #38 = Method	#2.#113;	//  sun/misc/Unsafe.throwException:(Ljava/lang/Throwable;)V
const #39 = class	#114;	//  java/lang/StringBuilder
const #40 = Method	#39.#72;	//  java/lang/StringBuilder."<init>":()V
const #41 = String	#115;	//  Caught an exception! Is it the same as the one I threw? 
const #42 = Method	#39.#116;	//  java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
const #43 = String	#117;	//  true
const #44 = String	#118;	//  false
const #45 = Method	#39.#119;	//  java/lang/StringBuilder.toString:()Ljava/lang/String;
const #46 = class	#120;	//  classes/test/UnsafeOps
const #47 = class	#121;	//  java/lang/Object
const #48 = Asciz	Foo;
const #49 = Asciz	InnerClasses;
const #50 = Asciz	<init>;
const #51 = Asciz	()V;
const #52 = Asciz	Code;
const #53 = Asciz	LineNumberTable;
const #54 = Asciz	getUnsafe;
const #55 = Asciz	()Lsun/misc/Unsafe;;
const #56 = Asciz	StackMapTable;
const #57 = class	#80;	//  java/lang/Exception
const #58 = Asciz	main;
const #59 = Asciz	([Ljava/lang/String;)V;
const #60 = class	#122;	//  "[Ljava/lang/String;"
const #61 = class	#73;	//  sun/misc/Unsafe
const #62 = class	#97;	//  java/lang/InstantiationException
const #63 = class	#121;	//  java/lang/Object
const #64 = class	#100;	//  java/lang/NoSuchFieldException
const #65 = class	#123;	//  java/lang/reflect/Field
const #66 = class	#124;	//  java/lang/String
const #67 = class	#80;	//  java/lang/Exception
const #68 = class	#125;	//  java/io/PrintStream
const #69 = class	#114;	//  java/lang/StringBuilder
const #70 = Asciz	SourceFile;
const #71 = Asciz	UnsafeOps.java;
const #72 = NameAndType	#50:#51;//  "<init>":()V
const #73 = Asciz	sun/misc/Unsafe;
const #74 = Asciz	theUnsafe;
const #75 = class	#126;	//  java/lang/Class
const #76 = NameAndType	#127:#128;//  getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
const #77 = class	#123;	//  java/lang/reflect/Field
const #78 = NameAndType	#129:#130;//  setAccessible:(Z)V
const #79 = NameAndType	#131:#132;//  get:(Ljava/lang/Object;)Ljava/lang/Object;
const #80 = Asciz	java/lang/Exception;
const #81 = NameAndType	#54:#55;//  getUnsafe:()Lsun/misc/Unsafe;
const #82 = NameAndType	#133:#134;//  addressSize:()I
const #83 = Asciz	[I;
const #84 = NameAndType	#135:#136;//  arrayBaseOffset:(Ljava/lang/Class;)I
const #85 = NameAndType	#137:#136;//  arrayIndexScale:(Ljava/lang/Class;)I
const #86 = Asciz	classes/test/UnsafeOps$Foo;
const #87 = NameAndType	#138:#139;//  allocateInstance:(Ljava/lang/Class;)Ljava/lang/Object;
const #88 = class	#140;	//  java/lang/System
const #89 = NameAndType	#141:#142;//  out:Ljava/io/PrintStream;
const #90 = NameAndType	#143:#144;//  a:I
const #91 = class	#125;	//  java/io/PrintStream
const #92 = NameAndType	#145:#146;//  println:(I)V
const #93 = NameAndType	#147:#148;//  b:D
const #94 = NameAndType	#145:#149;//  println:(D)V
const #95 = NameAndType	#99:#150;//  c:Ljava/lang/String;
const #96 = NameAndType	#145:#151;//  println:(Ljava/lang/String;)V
const #97 = Asciz	java/lang/InstantiationException;
const #98 = NameAndType	#145:#152;//  println:(Ljava/lang/Object;)V
const #99 = Asciz	c;
const #100 = Asciz	java/lang/NoSuchFieldException;
const #101 = NameAndType	#153:#154;//  objectFieldOffset:(Ljava/lang/reflect/Field;)J
const #102 = NameAndType	#155:#156;//  getObject:(Ljava/lang/Object;J)Ljava/lang/Object;
const #103 = Asciz	hello Unsafe;
const #104 = NameAndType	#157:#158;//  putObject:(Ljava/lang/Object;JLjava/lang/Object;)V
const #105 = Asciz	hello again Unsafe;
const #106 = NameAndType	#159:#158;//  putOrderedObject:(Ljava/lang/Object;JLjava/lang/Object;)V
const #107 = Asciz	not newC;
const #108 = Asciz	whargl;
const #109 = NameAndType	#160:#161;//  compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
const #110 = NameAndType	#145:#130;//  println:(Z)V
const #111 = Asciz	I'm exceptional!;
const #112 = NameAndType	#50:#151;//  "<init>":(Ljava/lang/String;)V
const #113 = NameAndType	#162:#163;//  throwException:(Ljava/lang/Throwable;)V
const #114 = Asciz	java/lang/StringBuilder;
const #115 = Asciz	Caught an exception! Is it the same as the one I threw? ;
const #116 = NameAndType	#164:#165;//  append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
const #117 = Asciz	true;
const #118 = Asciz	false;
const #119 = NameAndType	#166:#167;//  toString:()Ljava/lang/String;
const #120 = Asciz	classes/test/UnsafeOps;
const #121 = Asciz	java/lang/Object;
const #122 = Asciz	[Ljava/lang/String;;
const #123 = Asciz	java/lang/reflect/Field;
const #124 = Asciz	java/lang/String;
const #125 = Asciz	java/io/PrintStream;
const #126 = Asciz	java/lang/Class;
const #127 = Asciz	getDeclaredField;
const #128 = Asciz	(Ljava/lang/String;)Ljava/lang/reflect/Field;;
const #129 = Asciz	setAccessible;
const #130 = Asciz	(Z)V;
const #131 = Asciz	get;
const #132 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #133 = Asciz	addressSize;
const #134 = Asciz	()I;
const #135 = Asciz	arrayBaseOffset;
const #136 = Asciz	(Ljava/lang/Class;)I;
const #137 = Asciz	arrayIndexScale;
const #138 = Asciz	allocateInstance;
const #139 = Asciz	(Ljava/lang/Class;)Ljava/lang/Object;;
const #140 = Asciz	java/lang/System;
const #141 = Asciz	out;
const #142 = Asciz	Ljava/io/PrintStream;;
const #143 = Asciz	a;
const #144 = Asciz	I;
const #145 = Asciz	println;
const #146 = Asciz	(I)V;
const #147 = Asciz	b;
const #148 = Asciz	D;
const #149 = Asciz	(D)V;
const #150 = Asciz	Ljava/lang/String;;
const #151 = Asciz	(Ljava/lang/String;)V;
const #152 = Asciz	(Ljava/lang/Object;)V;
const #153 = Asciz	objectFieldOffset;
const #154 = Asciz	(Ljava/lang/reflect/Field;)J;
const #155 = Asciz	getObject;
const #156 = Asciz	(Ljava/lang/Object;J)Ljava/lang/Object;;
const #157 = Asciz	putObject;
const #158 = Asciz	(Ljava/lang/Object;JLjava/lang/Object;)V;
const #159 = Asciz	putOrderedObject;
const #160 = Asciz	compareAndSwapObject;
const #161 = Asciz	(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z;
const #162 = Asciz	throwException;
const #163 = Asciz	(Ljava/lang/Throwable;)V;
const #164 = Asciz	append;
const #165 = Asciz	(Ljava/lang/String;)Ljava/lang/StringBuilder;;
const #166 = Asciz	toString;
const #167 = Asciz	()Ljava/lang/String;;

{
public classes.test.UnsafeOps();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#1; //Method java/lang/Object."<init>":()V
   4:	return
  LineNumberTable: 
   line 11: 0
   line 76: 4


public static sun.misc.Unsafe getUnsafe();
  Code:
   Stack=2, Locals=1, Args_size=0
   0:	ldc_w	#2; //class sun/misc/Unsafe
   3:	ldc	#3; //String theUnsafe
   5:	invokevirtual	#4; //Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
   8:	astore_0
   9:	aload_0
   10:	iconst_1
   11:	invokevirtual	#5; //Method java/lang/reflect/Field.setAccessible:(Z)V
   14:	aload_0
   15:	aconst_null
   16:	invokevirtual	#6; //Method java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;
   19:	checkcast	#2; //class sun/misc/Unsafe
   22:	areturn
   23:	astore_0
   24:	aconst_null
   25:	areturn
  Exception table:
   from   to  target type
     0    22    23   Class java/lang/Exception

  LineNumberTable: 
   line 15: 0
   line 16: 9
   line 17: 14
   line 18: 23
   line 19: 24

  StackMapTable: number_of_entries = 1
   frame_type = 87 /* same_locals_1_stack_item */
     stack = [ class java/lang/Exception ]


public static void main(java.lang.String[]);
  Code:
   Stack=6, Locals=12, Args_size=1
   0:	invokestatic	#8; //Method getUnsafe:()Lsun/misc/Unsafe;
   3:	astore_1
   4:	aload_1
   5:	invokevirtual	#9; //Method sun/misc/Unsafe.addressSize:()I
   8:	istore_2
   9:	aload_1
   10:	ldc_w	#10; //class "[I"
   13:	invokevirtual	#11; //Method sun/misc/Unsafe.arrayBaseOffset:(Ljava/lang/Class;)I
   16:	istore_3
   17:	aload_1
   18:	ldc_w	#10; //class "[I"
   21:	invokevirtual	#12; //Method sun/misc/Unsafe.arrayIndexScale:(Ljava/lang/Class;)I
   24:	istore	4
   26:	aload_1
   27:	ldc_w	#13; //class classes/test/UnsafeOps$Foo
   30:	invokevirtual	#14; //Method sun/misc/Unsafe.allocateInstance:(Ljava/lang/Class;)Ljava/lang/Object;
   33:	astore	5
   35:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   38:	aload	5
   40:	checkcast	#13; //class classes/test/UnsafeOps$Foo
   43:	getfield	#16; //Field classes/test/UnsafeOps$Foo.a:I
   46:	invokevirtual	#17; //Method java/io/PrintStream.println:(I)V
   49:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   52:	aload	5
   54:	checkcast	#13; //class classes/test/UnsafeOps$Foo
   57:	getfield	#18; //Field classes/test/UnsafeOps$Foo.b:D
   60:	invokevirtual	#19; //Method java/io/PrintStream.println:(D)V
   63:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   66:	aload	5
   68:	checkcast	#13; //class classes/test/UnsafeOps$Foo
   71:	getfield	#20; //Field classes/test/UnsafeOps$Foo.c:Ljava/lang/String;
   74:	invokevirtual	#21; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
   77:	goto	91
   80:	astore	6
   82:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   85:	aload	6
   87:	invokevirtual	#23; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
   90:	return
   91:	ldc_w	#13; //class classes/test/UnsafeOps$Foo
   94:	ldc	#24; //String c
   96:	invokevirtual	#4; //Method java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
   99:	astore	6
   101:	goto	115
   104:	astore	7
   106:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   109:	aload	7
   111:	invokevirtual	#23; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
   114:	return
   115:	aload_1
   116:	aload	6
   118:	invokevirtual	#26; //Method sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
   121:	lstore	7
   123:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   126:	aload_1
   127:	aload	5
   129:	lload	7
   131:	invokevirtual	#27; //Method sun/misc/Unsafe.getObject:(Ljava/lang/Object;J)Ljava/lang/Object;
   134:	invokevirtual	#23; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
   137:	aload_1
   138:	aload	5
   140:	lload	7
   142:	ldc	#28; //String hello Unsafe
   144:	invokevirtual	#29; //Method sun/misc/Unsafe.putObject:(Ljava/lang/Object;JLjava/lang/Object;)V
   147:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   150:	aload_1
   151:	aload	5
   153:	lload	7
   155:	invokevirtual	#27; //Method sun/misc/Unsafe.getObject:(Ljava/lang/Object;J)Ljava/lang/Object;
   158:	invokevirtual	#23; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
   161:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   164:	aload	5
   166:	checkcast	#13; //class classes/test/UnsafeOps$Foo
   169:	getfield	#20; //Field classes/test/UnsafeOps$Foo.c:Ljava/lang/String;
   172:	invokevirtual	#21; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
   175:	ldc	#30; //String hello again Unsafe
   177:	astore	9
   179:	aload_1
   180:	aload	5
   182:	lload	7
   184:	aload	9
   186:	invokevirtual	#31; //Method sun/misc/Unsafe.putOrderedObject:(Ljava/lang/Object;JLjava/lang/Object;)V
   189:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   192:	aload_1
   193:	aload	5
   195:	lload	7
   197:	invokevirtual	#27; //Method sun/misc/Unsafe.getObject:(Ljava/lang/Object;J)Ljava/lang/Object;
   200:	invokevirtual	#23; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
   203:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   206:	aload	5
   208:	checkcast	#13; //class classes/test/UnsafeOps$Foo
   211:	getfield	#20; //Field classes/test/UnsafeOps$Foo.c:Ljava/lang/String;
   214:	invokevirtual	#21; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
   217:	aload_1
   218:	aload	5
   220:	lload	7
   222:	ldc	#32; //String not newC
   224:	ldc	#33; //String whargl
   226:	invokevirtual	#34; //Method sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
   229:	istore	10
   231:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   234:	iload	10
   236:	invokevirtual	#35; //Method java/io/PrintStream.println:(Z)V
   239:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   242:	aload	5
   244:	checkcast	#13; //class classes/test/UnsafeOps$Foo
   247:	getfield	#20; //Field classes/test/UnsafeOps$Foo.c:Ljava/lang/String;
   250:	invokevirtual	#21; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
   253:	aload_1
   254:	aload	5
   256:	lload	7
   258:	aload	9
   260:	ldc	#33; //String whargl
   262:	invokevirtual	#34; //Method sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
   265:	istore	10
   267:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   270:	iload	10
   272:	invokevirtual	#35; //Method java/io/PrintStream.println:(Z)V
   275:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   278:	aload	5
   280:	checkcast	#13; //class classes/test/UnsafeOps$Foo
   283:	getfield	#20; //Field classes/test/UnsafeOps$Foo.c:Ljava/lang/String;
   286:	invokevirtual	#21; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
   289:	new	#7; //class java/lang/Exception
   292:	dup
   293:	ldc	#36; //String I'm exceptional!
   295:	invokespecial	#37; //Method java/lang/Exception."<init>":(Ljava/lang/String;)V
   298:	astore	10
   300:	aload_1
   301:	aload	10
   303:	invokevirtual	#38; //Method sun/misc/Unsafe.throwException:(Ljava/lang/Throwable;)V
   306:	goto	349
   309:	astore	11
   311:	getstatic	#15; //Field java/lang/System.out:Ljava/io/PrintStream;
   314:	new	#39; //class java/lang/StringBuilder
   317:	dup
   318:	invokespecial	#40; //Method java/lang/StringBuilder."<init>":()V
   321:	ldc	#41; //String Caught an exception! Is it the same as the one I threw? 
   323:	invokevirtual	#42; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   326:	aload	10
   328:	aload	11
   330:	if_acmpne	338
   333:	ldc	#43; //String true
   335:	goto	340
   338:	ldc	#44; //String false
   340:	invokevirtual	#42; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   343:	invokevirtual	#45; //Method java/lang/StringBuilder.toString:()Ljava/lang/String;
   346:	invokevirtual	#21; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
   349:	return
  Exception table:
   from   to  target type
    26    77    80   Class java/lang/InstantiationException

    91   101   104   Class java/lang/NoSuchFieldException

   300   306   309   Class java/lang/Exception

  LineNumberTable: 
   line 24: 0
   line 27: 4
   line 28: 9
   line 29: 17
   line 33: 26
   line 34: 35
   line 35: 49
   line 36: 63
   line 40: 77
   line 37: 80
   line 38: 82
   line 39: 90
   line 44: 91
   line 48: 101
   line 45: 104
   line 46: 106
   line 47: 114
   line 49: 115
   line 50: 123
   line 51: 137
   line 52: 147
   line 53: 161
   line 54: 175
   line 55: 179
   line 56: 189
   line 57: 203
   line 60: 217
   line 61: 231
   line 62: 239
   line 63: 253
   line 64: 267
   line 65: 275
   line 68: 289
   line 70: 300
   line 73: 306
   line 71: 309
   line 72: 311
   line 74: 349

  StackMapTable: number_of_entries = 8
   frame_type = 255 /* full_frame */
     offset_delta = 80
     locals = [ class "[Ljava/lang/String;", class sun/misc/Unsafe, int, int, int ]
     stack = [ class java/lang/InstantiationException ]
   frame_type = 252 /* append */
     offset_delta = 10
     locals = [ class java/lang/Object ]
   frame_type = 76 /* same_locals_1_stack_item */
     stack = [ class java/lang/NoSuchFieldException ]
   frame_type = 252 /* append */
     offset_delta = 10
     locals = [ class java/lang/reflect/Field ]
   frame_type = 255 /* full_frame */
     offset_delta = 193
     locals = [ class "[Ljava/lang/String;", class sun/misc/Unsafe, int, int, int, class java/lang/Object, class java/lang/reflect/Field, long, class java/lang/String, class java/lang/Exception ]
     stack = [ class java/lang/Exception ]
   frame_type = 255 /* full_frame */
     offset_delta = 28
     locals = [ class "[Ljava/lang/String;", class sun/misc/Unsafe, int, int, int, class java/lang/Object, class java/lang/reflect/Field, long, class java/lang/String, class java/lang/Exception, class java/lang/Exception ]
     stack = [ class java/io/PrintStream, class java/lang/StringBuilder ]
   frame_type = 255 /* full_frame */
     offset_delta = 1
     locals = [ class "[Ljava/lang/String;", class sun/misc/Unsafe, int, int, int, class java/lang/Object, class java/lang/reflect/Field, long, class java/lang/String, class java/lang/Exception, class java/lang/Exception ]
     stack = [ class java/io/PrintStream, class java/lang/StringBuilder, class java/lang/String ]
   frame_type = 250 /* chop */
     offset_delta = 8


}

